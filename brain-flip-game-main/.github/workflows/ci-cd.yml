name: Ultimate Brain Flip CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: brain-flip/ultimate-experience

jobs:
  # Code Quality and Security Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run Prettier format check
        run: npm run format:check

      - name: Security audit
        run: npm audit --audit-level high

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Comprehensive Testing Suite
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-type: [unit, integration, e2e, accessibility, performance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start test databases
        run: |
          docker-compose -f docker-compose.test.yml up -d postgres redis influxdb
          sleep 30

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npm run test:unit -- --coverage --watchAll=false

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: |
          npm run build
          npm run start:test &
          sleep 30
          npm run test:e2e

      - name: Run accessibility tests
        if: matrix.test-type == 'accessibility'
        run: npm run test:accessibility

      - name: Run performance tests
        if: matrix.test-type == 'performance'
        run: npm run test:performance

      - name: Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # AI Model Testing and Validation
  ai-model-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install AI dependencies
        run: |
          pip install tensorflow tensorflowjs numpy scikit-learn pytest

      - name: Run AI model tests
        run: |
          python -m pytest ai-models/tests/ -v
          
      - name: Validate model accuracy
        run: |
          python ai-models/validate_models.py

      - name: Check for model bias
        run: |
          python ai-models/bias_detection.py

  # Build and Push Container Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, ai-model-tests]
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [frontend, ai-personalization, game-engine, battle-orchestration, cognitive-analytics, social-platform]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [frontend, ai-personalization, game-engine, battle-orchestration, cognitive-analytics, social-platform]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Development Environment
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: '1.27.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to development
        run: |
          helm upgrade --install brain-flip-dev ./k8s/helm/brain-flip \
            --namespace brain-flip-dev \
            --values ./k8s/helm/brain-flip/values-dev.yaml \
            --set global.imageTag=${{ github.sha }} \
            --wait --timeout=10m

      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app=brain-flip-frontend -n brain-flip-dev --timeout=300s
          npm run test:smoke -- --env=development

  # Deploy to Production Environment
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: '1.27.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          helm upgrade --install brain-flip-prod ./k8s/helm/brain-flip \
            --namespace brain-flip-prod \
            --values ./k8s/helm/brain-flip/values-prod.yaml \
            --set global.imageTag=${{ github.sha }} \
            --wait --timeout=15m

      - name: Run production health checks
        run: |
          kubectl wait --for=condition=ready pod -l app=brain-flip-frontend -n brain-flip-prod --timeout=300s
          npm run test:health -- --env=production

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "ðŸš€ Brain Flip Ultimate Experience deployed to production successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Performance Monitoring
  performance-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    steps:
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://app.brainflip.ai
            https://app.brainflip.ai/game
            https://app.brainflip.ai/battle
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run WebPageTest
        uses: WPO-Foundation/webpagetest-github-action@v1
        with:
          apiKey: ${{ secrets.WPT_API_KEY }}
          urls: https://app.brainflip.ai
          settings: |
            {
              "location": "Dulles:Chrome",
              "runs": 3,
              "connectivity": "3G"
            }